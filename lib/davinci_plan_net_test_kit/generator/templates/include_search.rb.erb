require_relative '../../../search_test'
require_relative '../../../generator/group_metadata'

module DaVinciPlanNetTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::Test
      include DaVinciPlanNetTestKit::SearchTest

      title 'Server returns <%= include_param_resource %> resources from <%= resource_type %> search with <%= include_param_string %>'
      description %(
        A server SHALL be capable of supporting _includes on search parameter <%= include_param %>.

        This test will perform a search on <%= resource_type %> with <%= include_param_string %> 
        and the '_id' search parameter using an id with a reference to <%= a_or_an(include_param_resource) %>
        identified during instance gathering. The test will pass if at least one <%= include_param_resource %> 
        resource is found in the response and each instance that does is referenced by a returned <%= resource_type %> instance.
      )

      id :<%= test_id %>

      verifies_requirements 'hl7.fhir.us.davinci-pdex-plan-net_1.1.0@27'

      def properties
        @properties ||= SearchTestProperties.new(
  <%= search_test_properties_string %>
        )
      end

      def self.metadata
        @metadata ||= Generator::GroupMetadata.new(YAML.load_file(File.join(__dir__, 'metadata.yml')))
      end

      def self.additional_metadata
        @additional_metadata ||= Generator::GroupMetadata.new(YAML.load_file(File.join(__dir__, '..', '<%= include_param_resource.underscore.gsub('organization_affiliation', 'org_affil') %>', 'metadata.yml'), aliases: true))
      end

      def scratch_resources
        scratch[:<%= profile_identifier %>_resources] ||= {}
      end

      def scratch_additional_resources
        scratch[:<%= include_param_resource.underscore %>_resources] ||= {}
      end

      run do
        run_include_search_test
      end
    end
  end
end